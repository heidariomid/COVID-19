{"ast":null,"code":"var _jsxFileName = \"/Users/omid/Desktop/coronavirus/covid-19/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styles from './Chart.module.css';\nimport cx from 'classnames';\nimport { fetchDailyData } from '../../api';\nimport { Bar, Line } from 'react-chartjs-2';\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const daily = async () => {\n      const data = await fetchDailyData();\n      setDailyData(data);\n    };\n\n    console.log(dailyData);\n    daily();\n  }, []);\n\n  const lineChartData = () => {\n    return {\n      // labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n      labels: dailyData.map(({\n        reportDate\n      }) => reportDate),\n      // labels: dailyData(({reportDate}) => reportDate),\n      datasets: [{\n        label: 'Infected',\n        fillColor: 'rgba(220,220,220,0.2)',\n        strokeColor: 'rgba(220,220,220,1)',\n        pointColor: 'rgba(220,220,220,1)',\n        pointStrokeColor: '#fff',\n        pointHighlightFill: '#fff',\n        pointHighlightStroke: 'rgba(220,220,220,1)',\n        data: dailyData.map(({\n          confirmed: {\n            total\n          }\n        }) => total)\n      }, {\n        label: 'Deaths',\n        borderColor: 'red',\n        backGroundColor: 'rgba(255, 0, 0, 0.8)',\n        fill: true,\n        fillColor: 'rgba(151,187,205,0.2)',\n        strokeColor: 'rgba(151,187,205,1)',\n        pointColor: 'rgba(151,187,205,1)',\n        pointStrokeColor: '#fff',\n        pointHighlightFill: '#fff',\n        pointHighlightStroke: 'rgba(151,187,205,1)',\n        data: dailyData.map(({\n          deaths: {\n            total\n          }\n        }) => total)\n      }]\n    };\n  };\n\n  const lineChart = dailyData.length > 0 ? /*#__PURE__*/React.createElement(Line, {\n    data: lineChartData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 43\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/omid/Desktop/coronavirus/covid-19/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","styles","cx","fetchDailyData","Bar","Line","Chart","dailyData","setDailyData","daily","data","console","log","lineChartData","labels","map","reportDate","datasets","label","fillColor","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","confirmed","total","borderColor","backGroundColor","fill","deaths","lineChart","length","container"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,cAAR,QAA6B,WAA7B;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAwB,iBAAxB;;AACA,MAAMC,KAAK,GAAG,MAAM;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMS,KAAK,GAAG,YAAY;AACzB,YAAMC,IAAI,GAAG,MAAMP,cAAc,EAAjC;AACAK,MAAAA,YAAY,CAACE,IAAD,CAAZ;AACA,KAHD;;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAE,IAAAA,KAAK;AACL,GAPQ,EAON,EAPM,CAAT;;AAQA,QAAMI,aAAa,GAAG,MAAM;AAC3B,WAAO;AACN;AACAC,MAAAA,MAAM,EAAEP,SAAS,CAACQ,GAAV,CAAc,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAkBA,UAAhC,CAFF;AAGN;AACAC,MAAAA,QAAQ,EAAE,CACT;AACCC,QAAAA,KAAK,EAAE,UADR;AAECC,QAAAA,SAAS,EAAE,uBAFZ;AAGCC,QAAAA,WAAW,EAAE,qBAHd;AAICC,QAAAA,UAAU,EAAE,qBAJb;AAKCC,QAAAA,gBAAgB,EAAE,MALnB;AAMCC,QAAAA,kBAAkB,EAAE,MANrB;AAOCC,QAAAA,oBAAoB,EAAE,qBAPvB;AAQCd,QAAAA,IAAI,EAAEH,SAAS,CAACQ,GAAV,CAAc,CAAC;AAACU,UAAAA,SAAS,EAAE;AAACC,YAAAA;AAAD;AAAZ,SAAD,KAA0BA,KAAxC;AARP,OADS,EAWT;AACCR,QAAAA,KAAK,EAAE,QADR;AAECS,QAAAA,WAAW,EAAE,KAFd;AAGCC,QAAAA,eAAe,EAAE,sBAHlB;AAICC,QAAAA,IAAI,EAAE,IAJP;AAKCV,QAAAA,SAAS,EAAE,uBALZ;AAMCC,QAAAA,WAAW,EAAE,qBANd;AAOCC,QAAAA,UAAU,EAAE,qBAPb;AAQCC,QAAAA,gBAAgB,EAAE,MARnB;AASCC,QAAAA,kBAAkB,EAAE,MATrB;AAUCC,QAAAA,oBAAoB,EAAE,qBAVvB;AAWCd,QAAAA,IAAI,EAAEH,SAAS,CAACQ,GAAV,CAAc,CAAC;AAACe,UAAAA,MAAM,EAAE;AAACJ,YAAAA;AAAD;AAAT,SAAD,KAAuBA,KAArC;AAXP,OAXS;AAJJ,KAAP;AA8BA,GA/BD;;AAiCA,QAAMK,SAAS,GAAGxB,SAAS,CAACyB,MAAV,GAAmB,CAAnB,gBAAuB,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEnB,aAAa,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvB,GAAyD,IAA3E;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAEZ,MAAM,CAACgC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCF,SAAnC,CAAP;AACA,CA9CD;;AAgDA,eAAezB,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport styles from './Chart.module.css';\nimport cx from 'classnames';\nimport {fetchDailyData} from '../../api';\nimport {Bar, Line} from 'react-chartjs-2';\nconst Chart = () => {\n\tconst [dailyData, setDailyData] = useState([]);\n\tuseEffect(() => {\n\t\tconst daily = async () => {\n\t\t\tconst data = await fetchDailyData();\n\t\t\tsetDailyData(data);\n\t\t};\n\t\tconsole.log(dailyData);\n\t\tdaily();\n\t}, []);\n\tconst lineChartData = () => {\n\t\treturn {\n\t\t\t// labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n\t\t\tlabels: dailyData.map(({reportDate}) => reportDate),\n\t\t\t// labels: dailyData(({reportDate}) => reportDate),\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Infected',\n\t\t\t\t\tfillColor: 'rgba(220,220,220,0.2)',\n\t\t\t\t\tstrokeColor: 'rgba(220,220,220,1)',\n\t\t\t\t\tpointColor: 'rgba(220,220,220,1)',\n\t\t\t\t\tpointStrokeColor: '#fff',\n\t\t\t\t\tpointHighlightFill: '#fff',\n\t\t\t\t\tpointHighlightStroke: 'rgba(220,220,220,1)',\n\t\t\t\t\tdata: dailyData.map(({confirmed: {total}}) => total),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Deaths',\n\t\t\t\t\tborderColor: 'red',\n\t\t\t\t\tbackGroundColor: 'rgba(255, 0, 0, 0.8)',\n\t\t\t\t\tfill: true,\n\t\t\t\t\tfillColor: 'rgba(151,187,205,0.2)',\n\t\t\t\t\tstrokeColor: 'rgba(151,187,205,1)',\n\t\t\t\t\tpointColor: 'rgba(151,187,205,1)',\n\t\t\t\t\tpointStrokeColor: '#fff',\n\t\t\t\t\tpointHighlightFill: '#fff',\n\t\t\t\t\tpointHighlightStroke: 'rgba(151,187,205,1)',\n\t\t\t\t\tdata: dailyData.map(({deaths: {total}}) => total),\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t};\n\n\tconst lineChart = dailyData.length > 0 ? <Line data={lineChartData()} /> : null;\n\n\treturn <div className={styles.container}>{lineChart}</div>;\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}